---

---

<div id="three-container"></div>

<style>
  #three-container {
    width: 100dvw;
    height: 100dvh; /* Full viewport height */
    display: block;
    position:absolute;
    z-index: -1;
  }
</style>

<script>
import type { ACTION_ERROR_CODES, ActionError } from "astro:actions";
import { imageConfig } from "astro:assets";
import * as THREE from "three";
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import vertexShader from '../shaders/vertex.glsl';
import fragmentShader from '../shaders/fragment.glsl';

  //Texture Loader and Initializing texture
  const textureLoader = new THREE.TextureLoader();
  const boty = "../textures/Boty.png"
  const texture = textureLoader.load(boty, (texture) => {
    texture.minFilter = THREE.NearestFilter;
  }) 
  

  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('three-container');
    
    // Set up the scene, camera, and renderer
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({
   
    });
    renderer.setSize(container.clientWidth, container.clientHeight);
    container.appendChild(renderer.domElement);

    // Add Torus to Scene
    const geometry = new THREE.TorusGeometry(10, 3, 16, 100);
    const material = new THREE.ShaderMaterial({ 
        vertexShader,
        fragmentShader,
        uniforms: {
          uTime: { value: 0 },
          uTexture: { value: texture}
        },
        transparent: true,
         side: THREE.DoubleSide,

     });

//Uniforms
let clock = new THREE.Clock()
material.uniforms.uTime.value = clock.getElapsedTime();

    const knot = new THREE.Mesh(geometry, material);
    scene.add(knot);

    const controls = new OrbitControls( camera, renderer.domElement );

    // Position the camera
    camera.position.z = 25;

    // Animation loop
    const animate = function () {
      requestAnimationFrame(animate);

      //updating uniform time to allow the shaders to play
      material.uniforms.uTime.value += 0.01;

      //knot rotation
      knot.rotation.x = 0.05;
      knot.rotation.z = 0.05;

      controls.update();

      renderer.render(scene, camera);
    };

    animate();

    // Handle window resize
    window.addEventListener('resize', () => {
      camera.aspect = container.clientWidth / container.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.clientWidth, container.clientHeight);
    });
  });
</script>
